{
  "instruction": [{"name": "loadPaperNet", "description": "Load PaperNet. In this net, nodes are papers and edges are citation relationships between papers.", "parameters": {}}, {"name": "loadAuthorNet", "description": "Load AuthorNet. In this net, nodes are authors and edges are collaboration relationships between authors.", "parameters": {}}, {"name": "neighbourCheck", "description": "List the first-order neighbors connect to the node. In paperNet, neigbours are cited papers of the paper. In authorNet, neigbours are collaborators of the author.", "parameters": {"type": "object", "properties": {"graph": {"type": "string", "enum": ["PaperNet", "AuthorNet"], "description": "The name of the graph to check"}, "node": {"type": "string", "description": "The node for which neighbors will be listed"}}}, "returns": {"type": "array", "description": "neighbors"}}, {"name": "paperNodeCheck", "description": "Return detailed attribute information of a specified paper in PaperNet", "parameters": {"type": "object", "properties": {"node": {"type": "string", "description": "Name of the paper."}}}, "returns": {"type": "object", "properties": {"authors": {"type": "array", "description": "The authors of the paper"}, "year": {"type": "number", "description": "The published year of the paper"}, "venue": {"type": "string", "description": "The published venue of the paper"}, "n_citation": {"type": "number", "description": "The number of citations of the paper"}, "keywords": {"type": "array", "description": "The keywords of the paper"}, "doc_type": {"type": "string", "description": "The document type of the paper"}}}}, {"name": "authorNodeCheck", "description": "Return detailed attribute information of a specified author in AuthorNet", "parameters": {"type": "object", "properties": {"node": {"type": "string", "description": "name of the author."}}}, "returns": {"type": "object", "properties": {"name": {"type": "string", "description": "The name of the author"}, "org": {"type": "string", "description": "The organization of the author"}}}}, {"name": "authorEdgeCheck", "description": "Return detailed attribute information of the edge between two specified nodes in a AuthorNet.", "parameters": {"type": "object", "properties": {"node1": {"type": "string", "description": "The first node of the edge"}, "node2": {"type": "string", "description": "The second node of the edge"}}}, "returns": {"type": "object", "properties": {"papers": {"type": "array", "description": "All papers that the two authors have co-authored"}}}}, {"name": "paperEdgeCheck", "description": "Return detailed attribute information of the edge between two specified nodes in a PaperNet.", "parameters": {"type": "object", "properties": {"node1": {"type": "string", "description": "The first node of the edge"}, "node2": {"type": "string", "description": "The second node of the edge"}}}, "returns": {"type": "null"}}, {"name": "check_valid_actions", "description": "Get supported actions for current tool.", "returns": {"type": "array", "description": "actions"}}, {"name": "UnsolvableRequest", "description": "Indicate that the current request cannot be solved with existing APIs.", "parameters": {"properties": {"message": {"type": "string", "description": "Message explaining why the request cannot be resolved."}}}}, {"name": "Finish", "description": "If you believe that you have obtained a result that can answer the task, please call this function to provide the final answer. Alternatively, if you recognize that you are unable to proceed with the task in the current state, call this function to restart. Remember: you must ALWAYS call this function at the end of your attempt, and the only part that will be shown to the user is the final answer, so it should contain sufficient information.", "parameters": {"type": "object", "properties": {"return_type": {"type": "string", "enum": ["give_answer", "give_up_and_restart"]}, "final_answer": {"type": "string", "description": "The final answer you want to give the user. You should have this field if 'return_type'=='give_answer'"}}, "required": ["return_type"]}}],
  "examples": [
    "Goal: When was the paper Learning the Principle of Least Action with Reinforcement Learning. published?\n\nAction: loadPaperNet with Action Input: {}\nObservation: PaperNet is loaded.\nThink: The question is asking the published date of a paper, I should use paperNodeCheck to check the node from the PaperNet in DBLP graph. The paper node is Learning the Principle of Least Action with Reinforcement Learning.\nAction: paperNodeCheck with Action Input: {\"node\":\"Learning the Principle of Least Action with Reinforcement Learning.\"}\nObservation: {'year': 2021, 'venue': 'AAAI Spring Symposium - MLPS', 'n_citation': 0, 'keywords': [], 'doc_type': 'Conference'}\nThink: The published date of the paper is 2021. I can finish this goal\nAction: finish with Action Input: {\"answer\": \"2021\"}\nObservation: 2021\n"
  ],
  "system_msg": "You are AutoGPT, you can use many tools(functions) to do the following task.\nFirst I will give you the task description, and your task start.\nAt each step, you need to give your thought to analyze the status now and what to do next, with a function call to actually excute your step. Your output should follow this format:\nThought:\nAction\nAction Input:\n\nAfter the call, you will get the call result, and you are now in a new state.\nThen you will analyze your status now, then decide what to do next...\nAfter many (Thought-call) pairs, you finally perform the task, then you can give your finial answer.\nRemember: \n1.the state change is irreversible, you can't go back to one of the former state, if you want to restart the task, say \"I give up and restart\".\n2.All the thought is short, at most in 5 sentence.\n3.You can do more then one trys, so if your plan is to continusly try some conditions, you can do one of the conditions per try.\nLet's Begin!\nTask description: You should use functions to help handle the real time user querys.\nRemember:\n1.ALWAYS call \"Finish\" function at the end of the task. And the final answer should contain enough information to show to the user,If you can't handle the task, or you find that function calls always fail(the function is not valid now), use function Finish->give_up_and_restart.\n2.Do not use origin tool names, use only subfunctions' names.\nYou have access of the following tools:\n1.AcademiaTool:Academia Tool equips LLM agents the academia tool to query information related to computer science research, including academic papers and author information\n\nSpecifically, you have access to the following APIs:"
}